cmake_minimum_required (VERSION 3.3)

project( NFIQ2 )

set( NO_SEARCH TRUE )

# set colors for cmake comand line
string(ASCII 27 Esc)
set(Na "${Esc}[m")
set(Rd "${Esc}[31m")
set(Gn "${Esc}[32m")
set(Ye "${Esc}[33m")
set(Bl "${Esc}[34m")
set(Pk "${Esc}[35m")
set(Gy "${Esc}[37m")

# detect target platform
if( WIN32 ) 
  if( ( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT 32BITS ) OR 64BITS )
    set(TARGET_PLATFORM "win64")
  else()
    set(TARGET_PLATFORM "win32")
  endif()
elseif( ANDROID )
  if( X86 )
    if( ( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT 32BITS ) OR 64BITS )
      set(TARGET_PLATFORM "android-x86-64")
    else()
      set(TARGET_PLATFORM "android-x86-32")
    endif()
  else()
    if( ( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT 32BITS ) OR 64BITS )
      set(TARGET_PLATFORM "android-arm64")
    else()
      set(TARGET_PLATFORM "android-arm32")
    endif()
  endif()
elseif( APPLE )
  if( ( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT 32BITS ) OR 64BITS )
    set(TARGET_PLATFORM "apple64")
  else()
    set(TARGET_PLATFORM "apple32")
  endif()
elseif( UNIX )
  if( ( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT 32BITS ) OR 64BITS )
    set(TARGET_PLATFORM "linux64")
  else()
    set(TARGET_PLATFORM "linux32")
  endif()
endif()

# detect compiler
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  message( "${Gn}Detected Clang compiler${Na}" )
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  message( "${Gn}Detected GNU compiler${Na}" )
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  message( "${Gn}Detected Intel compiler${Na}" )
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  message( "Detected MSVC compiler" )
else()
  message( "Detected ${CMAKE_CXX_COMPILER_ID}" )
endif()

if( 32BITS)
  set( CMAKE_C_FLAGS "-m32")
  set( CMAKE_CXX_FLAGS "-m32") 
elseif( 64BITS)
  set( CMAKE_C_FLAGS "-m64")
  set( CMAKE_CXX_FLAGS "-m64") 
endif()

set( ROOT_PATH ${PROJECT_SOURCE_DIR} )
set( BUILD_PATH  ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CXX_COMPILER_ID} )

# create distribution path( 3 parts)
# 1st
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  set( DIST_PATH  ${ROOT_PATH}/dist )
else()
  get_filename_component( tmp ${BUILD_PATH}/../.. ABSOLUTE   )
  get_filename_component( tmp ${tmp} NAME  )
  set( DIST_PATH  ${ROOT_PATH}/dist/${tmp} )
endif()
# 2nd
get_filename_component( tmp ${BUILD_PATH}/.. ABSOLUTE   )
get_filename_component( tmp ${tmp} NAME  )
set( DIST_PATH  ${DIST_PATH}/${tmp} )
# 3rd
get_filename_component( tmp ${BUILD_PATH} NAME )
set( DIST_PATH  ${DIST_PATH}/${tmp} )

message( STATUS "----- Configuring ${PROJECT_NAME} -----" ) 
message( STATUS "-- Project root path: '${ROOT_PATH}'" )
message( STATUS "-- Project build path: '${BUILD_PATH}'" )
message( STATUS "-- Project distribution path: '${DIST_PATH}'" )

set( OPENCV_VERSION "2.4.13.6")
#set( OPENCV_VERSION "3.4.5")
set( FRFXLL_VERSION ) # placeholder,  will be auto determined

set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${DIST_PATH} )
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${DIST_PATH} )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${DIST_PATH} )

add_subdirectory("${ROOT_PATH}/biomdi/" "${BUILD_PATH}/biomdi/")
add_subdirectory("${ROOT_PATH}/fingerjetfxose/" "${BUILD_PATH}/fingerjetfxose/")
add_subdirectory("${ROOT_PATH}/opencv/" "${BUILD_PATH}/opencv/")
add_subdirectory("${ROOT_PATH}/nfiq2/NFIQ2Algorithm" "${BUILD_PATH}/nfiq2/NFIQ2Algorithm")
add_subdirectory("${ROOT_PATH}/nfiq2/NFIQ2Api" "${BUILD_PATH}/nfiq2/NFIQ2Api")
